generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  email             String            @unique
  name              String?
  password          String?
  OnRampTransaction OnRampTransaction[]
  Balance           Balance?
  sentTransfers     p2pTransfer[]       @relation(name:"FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name:"ToUserRelation")
   accounts Account[]
   session Session[]
}

model Merchant {
    id                String                 @id @default(cuid())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id                String                 @id @default(cuid())
  status    OnRampStatus
  token     String       
  provider  String
  amount    Int
  startTime DateTime
  userEmail    String
  user      User         @relation(fields: [userEmail], references: [email])
}

model Balance {
  id                String                 @id @default(cuid())
  userEmail String  @unique
  amount Int        @default(0)
  user   User @relation(fields: [userEmail], references: [email])
}
model p2pTransfer{
   id                String                 @id @default(cuid())
  amount    Int
  status    P2PStatus
  timestamp DateTime
  fromUserEmail String
  fromUser User @relation(fields: [fromUserEmail], references: [email], name:"FromUserRelation")
  toUserEmail String
  toUser User @relation(fields: [toUserEmail], references: [email], name:"ToUserRelation")
}
model Account {
  id                 String  @id @default(uuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String  @unique
  access_token       String? 
  expires_at         Int?
  refresh_token      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
}
model Session {
  id           String  @id @default(uuid())
  sessionToken String  @unique
  userId       String
  expires      DateTime
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
}

enum P2PStatus { 
  Success
  Failure
}
